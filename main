#include <arduino.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include "DHT.h"

#define LED_BUILTIN 2
#define PIN_LED 2 // pino led
#define DHTPIN 4 // pino de dados do sensor da temperatura e umidade do ar  
#define DHTTYPE DHT11 // modelo do sensor de temperatura e umidade do ar (DHT 11)
#define pinSensorA 36 // pino do sensor de umidade do solo analogico
#define pinSensorD 16 // pino do sensor de umidade do solo digital
#define Buzzer 17 // pino do atuador buzzer 

/* Definicoes para o MQTT */
#define TOPICO_SUBSCRIBE_LED          "topico_liga_desliga_led"
#define TOPICO_PUBLISH_TEMPERATURA    "topico_sensor_temperatura"
#define TOPICO_PUBLISH_TEMPERATURA_AR "topico_sensor_temperatura_ar"
#define TOPICO_PUBLISH_UMIDADE_AR     "topico_sensor_umidade_ar" 
#define TOPICO_PUBLISH_UMIDADE_SOLO   "topico_sensor_umidade_solo"
#define TOPICO_PUBLISH_SINAL_SONORO   "topico_sinal_sonoro"

#define ID_MQTT  "IoT_PUC_SG_mqtt"     //id mqtt (para identificação de sessão)

// WI-FI Ricardo
//const char* SSID = "AndroidAP2D94"; // SSID / nome da rede WI-FI que deseja se conectar
//const char* PASSWORD = "hhxl3743"; // Senha da rede WI-FI que deseja se conectar

// casa Ricardo
const char* SSID = "IMPLANTAR_RECANTO_DO_GUERREIRO"; // SSID / nome da rede WI-FI que deseja se conectar
const char* PASSWORD = "gr12122015"; // Senha da rede WI-FI que deseja se conectar

// casa Fatima
//const char* SSID     = "NET_2G43C248"; // SSID / nome da rede WI-FI que deseja se conectar
//const char* PASSWORD = "F843C248"; // Senha da rede WI-FI que deseja se conectar

// casa Conway
//const char* SSID     = "VIRTUA 202"; // SSID / nome da rede WI-FI que deseja se conectar
//const char* PASSWORD = "BrCon2657"; // Senha da rede WI-FI que deseja se conectar

const char* BROKER_MQTT = "test.mosquitto.org";
int BROKER_PORT = 1883; // Porta do Broker MQTT

//Variáveis e objetos globais
WiFiClient espClient; // Cria o objeto espClient
PubSubClient MQTT(espClient); // Instancia o Cliente MQTT passando o objeto espClient

long numAleatorio;
float temperatura_ar;
float umidade_ar;
long umidade_solo;
int umidade_solo_d;
char umidade_solo_escrito;
int comp;


DHT dht(DHTPIN, DHTTYPE);

/* Prototypes */
void initWiFi(void);
void initMQTT(void);
void mqtt_callback(char* topic, byte* payload, unsigned int length);
void reconnectMQTT(void);
void reconnectWiFi(void);
void VerificaConexoesWiFIEMQTT(void);

/*
   Implementações
*/

/* Função: inicializa e conecta-se na rede WI-FI desejada
   Parâmetros: nenhum
   Retorno: nenhum
*/
void initWiFi(void)
{
  delay(10);
  Serial.println("------Conexao WI-FI------");
  Serial.print("Conectando-se na rede: ");
  Serial.println(SSID);
  Serial.println("Aguarde");

  reconnectWiFi();
}


/* Função: inicializa parâmetros de conexão MQTT(endereço do
           broker, porta e seta função de callback)
   Parâmetros: nenhum
   Retorno: nenhum
*/
void initMQTT(void)
{
  MQTT.setServer(BROKER_MQTT, BROKER_PORT);   //informa qual broker e porta deve ser conectado
  MQTT.setCallback(mqtt_callback);            //atribui função de callback (função chamada quando qualquer informação de um dos tópicos subescritos chega)
}

/* Função: função de callback
           esta função é chamada toda vez que uma informação de
           um dos tópicos subescritos chega)
   Parâmetros: nenhum
   Retorno: nenhum
*/
void mqtt_callback(char* topic, byte* payload, unsigned int length)
{
  String msg;

  /* obtem a string do payload recebido */
  for (int i = 0; i < length; i++)
  {
    char c = (char)payload[i];
    msg += c;
  }

  Serial.print("Chegou a seguinte string via MQTT: ");
  Serial.println(msg);

  /* toma ação dependendo da string recebida */
  if (msg.equals("L"))
  {
    digitalWrite(PIN_LED, HIGH);
    Serial.println("LED aceso mediante comando MQTT");
  }

  if (msg.equals("D"))
  {
    digitalWrite(PIN_LED, LOW);
    Serial.println("LED apagado mediante comando MQTT");
  }
}


/* Função: reconecta-se ao broker MQTT (caso ainda não esteja conectado ou em caso de a conexão cair)
           em caso de sucesso na conexão ou reconexão, o subscribe dos tópicos é refeito.
   Parâmetros: nenhum
   Retorno: nenhum
*/
void reconnectMQTT(void)
{
  while (!MQTT.connected())
  {
    Serial.print("* Tentando se conectar ao Broker MQTT: ");
    Serial.println(BROKER_MQTT);
    if (MQTT.connect(ID_MQTT))
    {
      Serial.println("Conectado com sucesso ao broker MQTT!");
      MQTT.subscribe(TOPICO_SUBSCRIBE_LED);
    }
    else
    {
      Serial.println("Falha ao reconectar no broker.");
      Serial.println("Havera nova tentatica de conexao em 2s");
      delay(2000);
    }
  }  
}

/* Função: verifica o estado das conexões WiFI e ao broker MQTT.
           Em caso de desconexão (qualquer uma das duas), a conexão
           é refeita.
   Parâmetros: nenhum
   Retorno: nenhum
*/
void VerificaConexoesWiFIEMQTT(void)
{
  if (!MQTT.connected())
    reconnectMQTT(); //se não há conexão com o Broker, a conexão é refeita

  reconnectWiFi(); //se não há conexão com o WiFI, a conexão é refeita
}

/* Função: reconecta-se ao WiFi
   Parâmetros: nenhum
   Retorno: nenhum
*/
void reconnectWiFi(void)
{
  //se já está conectado a rede WI-FI, nada é feito.
  //Caso contrário, são efetuadas tentativas de conexão
  if (WiFi.status() == WL_CONNECTED)
    return;

  WiFi.begin(SSID, PASSWORD); // Conecta na rede WI-FI

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(100);
    Serial.print(".");
  }

  Serial.println();
  Serial.print("Conectado com sucesso na rede ");
  Serial.print(SSID);
  Serial.println("\nIP obtido: ");
  Serial.println(WiFi.localIP());
}


void setup() {
  Serial.begin(9600); //Enviar e receber dados em 9600 baud
  delay(1000);
  Serial.println("Disciplina IoT: acesso a nuvem via ESP32");
  delay(1000);
  // programa LED interno como saida
  pinMode(PIN_LED, OUTPUT);
  digitalWrite(PIN_LED, LOW);// apaga o LED

  pinMode(pinSensorA, INPUT);
  pinMode(pinSensorD, INPUT);

  pinMode (Buzzer, OUTPUT);

  dht.begin();

  // GERANDO TEMPERATURA COMO UM NÚMERO ALEATÓIO
  // inicializa o gerador de números aleatórios.
  // um pino analógico desconectado irá retornar um
  // valor aleatório de tensão em analogRead()
  randomSeed(analogRead(0));

  /* Inicializa a conexao wi-fi */
  initWiFi();

  /* Inicializa a conexao ao broker MQTT */
  initMQTT();
}

// the loop function runs over and over again forever
void loop() {

  // cria string para temperatura
  char temperatura_str[10] = {0};
  char temperatura_ar_str[10] = {0};
208
  pinMode(pinSensorD, INPUT);
209
​
210
  pinMode (Buzzer, OUTPUT);
211
​
212
  dht.begin();
213
​
214
  // GERANDO TEMPERATURA COMO UM NÚMERO ALEATÓIO
215
  // inicializa o gerador de números aleatórios.
216
  // um pino analógico desconectado irá retornar um
217
  // valor aleatório de tensão em analogRead()
218
  randomSeed(analogRead(0));
219
​
220
  /* Inicializa a conexao wi-fi */
221
  initWiFi();
222
​
223
  /* Inicializa a conexao ao broker MQTT */
224
  initMQTT();
225
}
226
​
227
// the loop function runs over and over again forever
228
void loop() {
229
​
230
  // cria string para temperatura
231
  char temperatura_str[10] = {0};
232
  char temperatura_ar_str[10] = {0};
233
  char umidade_ar_str[10] = {0};
234
  char umidade_solo_str[10] = {0};
235
  char umidade_solo_d_str[] = {0};
236
  char comparacao_str[] = {0};
237
  char sinal_sonoro_str[] = {0};
238
  
239
/* garante funcionamento das conexões WiFi e ao broker MQTT */
240
  VerificaConexoesWiFIEMQTT();
241
​
242
  // gera um valor aleatório de temperatura entre 10 e 100
243
  numAleatorio = random(10, 101);
244
  temperatura_ar = dht.readTemperature();
245
  umidade_ar = dht.readHumidity();
246
  umidade_solo = analogRead(pinSensorA);
247
  umidade_solo_d = digitalRead(pinSensorD);
248
  Serial.println("valor da variavel umidade solo d: ");
249
  Serial.println(umidade_solo_d);
250
  
251
  comp = 1;
252
  
253
  Serial.println("valor da variavel comp: ");
254
  Serial.println(comp);
255
​
256
  
257
  // formata a temperatura aleatoria  como string
258
  sprintf(temperatura_str, "%dC", numAleatorio);
259
  sprintf(temperatura_ar_str, "%.1f*C",temperatura_ar );
260
  sprintf(umidade_ar_str, "%.1f", umidade_ar);
261
  sprintf(umidade_solo_str, "%d",umidade_solo);
262
  
263
  

  char umidade_ar_str[10] = {0};
  char umidade_solo_str[10] = {0};
  char umidade_solo_d_str[] = {0};
  char comparacao_str[] = {0};
  char sinal_sonoro_str[] = {0};
  
/* garante funcionamento das conexões WiFi e ao broker MQTT */
  VerificaConexoesWiFIEMQTT();

  // gera um valor aleatório de temperatura entre 10 e 100
  numAleatorio = random(10, 101);
  temperatura_ar = dht.readTemperature();
  umidade_ar = dht.readHumidity();
  umidade_solo = analogRead(pinSensorA);
  umidade_solo_d = digitalRead(pinSensorD);
  Serial.println("valor da variavel umidade solo d: ");
  Serial.println(umidade_solo_d);
  
  comp = 1;
  
  Serial.println("valor da variavel comp: ");
  Serial.println(comp);

  
  // formata a temperatura aleatoria  como string
  sprintf(temperatura_str, "%dC", numAleatorio);
  sprintf(temperatura_ar_str, "%.1f*C",temperatura_ar );
  sprintf(umidade_ar_str, "%.1f", umidade_ar);
  sprintf(umidade_solo_str, "%d",umidade_solo);
  
  
  /*  Publica a temperatura */
  MQTT.publish(TOPICO_PUBLISH_TEMPERATURA, temperatura_str);
  MQTT.publish(TOPICO_PUBLISH_TEMPERATURA_AR, temperatura_ar_str);
  MQTT.publish(TOPICO_PUBLISH_UMIDADE_AR, umidade_ar_str);
  
  Serial.print("Gerando temperatura aleatoria: ");
  Serial.println(temperatura_str);
  
  Serial.print(" Temperatura do ar: ");
  Serial.println(temperatura_ar_str);
  
  Serial.print(" Umidade do ar: ");
  Serial.println(umidade_ar_str);

  Serial.print(" Umidade do solo analogico: ");
  Serial.println(umidade_solo_str);

  Serial.print(" Umidade do solo digital: ");
  
  if(umidade_solo_d == comp){
       
       Serial.println("sensor sem agua");
       sprintf(umidade_solo_d_str, "%s","sensor sem agua");  
       MQTT.publish(TOPICO_PUBLISH_UMIDADE_SOLO, umidade_solo_d_str);
       Serial.print("frase escrita na variavel umidade_solo_d_str: ");
       Serial.println(umidade_solo_d_str);
       
       sprintf(sinal_sonoro_str, "%s","desativado");
       MQTT.publish(TOPICO_PUBLISH_SINAL_SONORO, sinal_sonoro_str);
       
       
  }else{

       Serial.println("sensor com agua");
       
       sprintf(umidade_solo_d_str, "%s","sensor com agua");
       MQTT.publish(TOPICO_PUBLISH_UMIDADE_SOLO, umidade_solo_d_str);  
       Serial.print("frase escrita na variavel umidade_solo_d_str: ");
       Serial.println(umidade_solo_d_str);

       sprintf(sinal_sonoro_str, "%s","ativado");
       MQTT.publish(TOPICO_PUBLISH_SINAL_SONORO, sinal_sonoro_str);
       
       digitalWrite (Buzzer, HIGH); //turn buzzer on
       delay(200);
       digitalWrite (Buzzer, LOW);  //turn buzzer off
       delay(200);
  }          

  
  // testa se retorno é valido, caso contrário algo está errado.
  if (isnan(temperatura_ar) || isnan(umidade_ar)) 
  {
    Serial.println("Falha de leitura do sensor DHT11");
  } 
  else
  {
    Serial.print("Umidade: ");
    Serial.print(umidade_ar);
    Serial.print(" %t");
    Serial.print("Temperatura: ");
    Serial.print(temperatura_ar);
    Serial.println(" *C");
  }

  Serial.print("Digital:");
  
  if (digitalRead(pinSensorD)) {
     Serial.print("SEM UMIDADE ");
  } else {
     Serial.print("COM UMIDADE ");
  }

  Serial.print("  Analogico:");
  Serial.print(analogRead(pinSensorA)); 
  Serial.print("  ");

  
  /* keep-alive da comunicação com broker MQTT */
  MQTT.loop();

  /* Refaz o ciclo após 2 segundos */
  delay(2000);
}
